@@grammar::BEL
@@parseinfo :: True

##############
#  METADATA  #
##############

# BEL VERSION: 2.0.0
# EBNF CREATION TIMESTAMP: November 14, 2017 - 03:43:10PM

#########################
#  GRAMMAR DEFINITIONS  #
#########################

start = bel_statement $ ;
bel_statement = subject:function ~ [relation:relation ~ object:obj] ;

obj = (function | enclosed_statement) ;
enclosed_statement = function_open bel_statement:bel_statement function_close ;

##### FUNCTIONS #####

function = function:funcs function_open function_args:f_args function_close ;
funcs =
    'cellSurfaceExpression' | 'compositeAbundance' | 'microRNAAbundance' | 'biologicalProcess' | 'proteinAbundance' | 'complexAbundance' | 'cellSecretion' | 'geneAbundance' | 'translocation' | 'rnaAbundance' | 'degradation' | 'abundance' | 'pathology' | 'composite' | 'reaction' | 'activity' | 'complex' | 'list' | 'surf' | 'path' | 'tloc' | 'rxn' | 'sec' | 'act' | 'deg' | 'bp' | 'a' | 'p' | 'g' | 'm' | 'r' ;

f_args = ','.{(function | modifier_function | namespace_arg | string_arg)}* ;

##### MODIFIER FUNCTIONS #####

modifier_function = m_function:m_funcs function_open m_function_args:m_args function_close ;
m_funcs =
    'proteinModification' | 'molecularActivity' | 'reactants' | 'location' | 'products' | 'fragment' | 'variant' | 'fromLoc' | 'fusion' | 'toLoc' | 'pmod' | 'frag' | 'loc' | 'fus' | 'var' | 'ma' ;

m_args = ','.{(function | namespace_arg | string_arg)}* ;

##### RELATIONSHIPS #####

relation = relations ;
relations =
    'prognosticBiomarkerFor' | 'negativeCorrelation' | 'positiveCorrelation' | 'rateLimitingStepOf' | 'directlyIncreases' | 'directlyDecreases' | 'causesNoChange' | 'hasComponents' | 'transcribedTo' | 'translatedTo' | 'hasComponent' | 'biomarkerFor' | 'subProcessOf' | 'association' | 'orthologous' | 'hasMembers' | 'analogous' | 'regulates' | 'hasMember' | 'decreases' | 'increases' | 'reg' | 'neg' | 'cnc' | 'pos' | 'isA' | '-|' | '->' | ':>' | '>>' | '=>' | '=|' | '--' ;

##### MISCELLANEOUS #####

namespace_arg = ns_arg:full_nsv ;
full_nsv = nspace:ns_string ':' ns_value:(quoted_string | string) ;

string_arg = str_arg:full_string ;
full_string = (quoted_string | string) ;



# quoted_string: Matches like any string but requires it to be in quotation marks.
quoted_string = /\"(?:[^"\\]|\\.)*\"/ ;

# string: Matches any letter, digit or underscore once or more.
string = /\w+/ ;

# ns_string: Matches any capital letter or digit.
ns_string = /[A-Z0-9]+/ ;

function_open = '(' ;
function_close = ')' ;
