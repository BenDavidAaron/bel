@@grammar::BEL
@@parseinfo :: True

##############
#  METADATA  #
##############

# BEL VERSION: {{ bel_version }}
# EBNF CREATION TIMESTAMP: {{ created_time }}

#########################
#  GRAMMAR DEFINITIONS  #
#########################

start = bel_statement $ ;
bel_statement = subject:function ~ [relationship:relationship ~ object:obj] ;

obj = (function | enclosed_statement) ;
enclosed_statement = function_open bel_statement:bel_statement function_close ;

##### FUNCTIONS #####

function = function:funcs function_open function_args:f_args function_close ;
funcs =
    {% for function in functions %}'{{ function }}'{{ " | " if not loop.last }}{% endfor %} ;

f_args = ','.{(function | modifier_function | namespace_arg | string_arg)}* ;

##### MODIFIER FUNCTIONS #####

modifier_function = m_function:m_funcs function_open m_function_args:m_args function_close ;
m_funcs =
    {% for m_function in m_functions %}'{{ m_function }}'{{ " | " if not loop.last }}{% endfor %} ;

m_args = ','.{(function | namespace_arg | string_arg)}* ;

##### RELATIONSHIPS #####

relationship = relations ;
relations =
    {% for relationship in relationships %}'{{ relationship }}'{{ " | " if not loop.last }}{% endfor %} ;

##### MISCELLANEOUS #####

namespace_arg = ns_arg:full_nsv ;
full_nsv = nspace:ns_string ':' ns_value:(quoted_string | string) ;

string_arg = str_arg:full_string ;
full_string = (quoted_string | string) ;



# quoted_string: Matches like any string but requires it to be in quotation marks.
quoted_string = /\"(?:[^"\\]|\\.)*\"/ ;

# string: Matches any letter, digit or underscore once or more.
string = /\w+/ ;

# ns_string: Matches any capital letter or digit.
ns_string = /[A-Z0-9]+/ ;

function_open = '(' ;
function_close = ')' ;